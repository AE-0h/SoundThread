{
  "inputfile": {
	"description": 
"Loads a file for processing - supports mono and stereo .wav files

[b]Parameters[/b]
[table=2]
[cell]Load File[/cell][cell]Opens a file browser to select a sound file[/cell]
[cell]Play/Stop[/cell][cell]Plays the input sound file[/cell]
[/table]

[b]Functionality[/b]
SoundThread only supports mono and stereo .wav files.

Clicking and dragging on the soundfile viewer will let you select a section of audio to play.

If audio is selected in Input File when you run the thread, SoundThread will automatically cut out that section and process only that.

Clicking on the soundfile viewer while audio is playing will allow you to jump around the file to listen to different sections.
",
  },
  "outputfile": {
	"description": 
"Manages output for running threads

[b]Parameters[/b]
[table=2]
[cell]File Name[/cell][cell]The name for your output file[/cell]
[cell]Run Thread[/cell][cell]Runs the current thread, opens a file dialog to choose the folder for the output files[/cell]
[cell]Delete Intermediate Files[/cell][cell]If switched on, deletes all files except the final output file[/cell]
[cell]Reuse Last Output Folder[/cell][cell]If switched on, the last folder selected on Run Thread will be used for output files[/cell]
[cell]Open Folder[/cell][cell]Opens the last used output folder[/cell]
[cell]Recycle File[/cell][cell]Loops the output file back to the Input File node for reprocessing[/cell]
[cell]Play/Stop[/cell][cell]Plays the last output file[/cell]
[/table]

[b]Functionality[/b]
The name inputted in File Name will be appended with the current date and time so that you don't need to input a new file name each time.

SoundThread can create a lot of files as each node in the thread can create multiple files. Turning on Delete Intermediate Files will delete everything but the main output file. 

Clicking and dragging on the soundfile viewer will let you select a section of audio to play. Clicking on the soundfile viewer while audio is playing will allow you to jump around the file to listen to different sections.
",
  },
  "notes": {
	"description": 
"A box for taking notes

[b]Functionality[/b]
Doesn't do anything other than giving you a space to take notes. You can right click in the text box to copy and paste and use special characters like emojis üòä.
",
  },
  "distort_average": {
	"description": 
"Average the waveshape over a number of wavecycles

[table=3]
[cell][b]Parameter Name[/b][/cell][cell][b]Description[/b][/cell][cell][b]Automatable[/b][/cell]
[cell]Cycle Count[/cell][cell]Number of cycles over which to average[/cell][cell][center]‚úÖ[/center][/cell]
[/table]

[b]Functionality[/b]
Performs a mathematical averaging of the set number of cycle counts. The effect is more akin to a loss of resolution than the blurring which might be expected. Values below 10 retain some semblance of the original, while values of 100 create a kind of 'sample hold' effect.

",
  },
  "clip_clip_2": {
	"description": 
"Clip a fraction of half wavecycles

[table=3]
[cell][b]Parameter Name[/b][/cell][cell][b]Description[/b][/cell][cell][b]Automatable[/b][/cell]
[cell]Fraction[/cell][cell]Fraction of each half wavecycle to clip, 1 = no change[/cell][cell][center]‚ùå[/center][/cell]
[/table]

[b]Functionality[/b]
Cuts the top and bottom off of a wavecycle. Unlike conventional clipping that only cuts off parts of the signal that exceeds a set threshold, Clip Fraction looks at each cycle of the sound and cuts off a set fraction of that wavecycle. This produces a clipping effect that is uniform across the entire signal and maintains the dynamic range of the original. The lower you set the value, the more distorted the sound will be.
",
  },
  "distort_divide": {
	"description": 
"Distortion by dividing wavecycle frequency

[table=3]
[cell][b]Parameter Name[/b][/cell][cell][b]Description[/b][/cell][cell][b]Automatable[/b][/cell]
[cell]Divider[/cell][cell] [/cell][cell][center]‚úÖ[/center][/cell]
[/table]

[b]Functionality[/b]
Takes a wavecycle and divides its frequency, pitch shifting it down and making it slower. This longer wavecycle replaces the next few wavecycles keeping the length of the file the same. This produces a rough pitch shift effect with added distortion artifacts. Works best with division values less than 4, at high division values the sound file may be too low to hear.

This process is the opposite of Distort: Multiply.
",
  },
  "distort_fractal": {
	"description": 
"Superimpose miniature copies of a wavecycles onto itself

[table=3]
[cell][b]Parameter Name[/b][/cell][cell][b]Description[/b][/cell][cell][b]Automatable[/b][/cell]
[cell]Scaling[/cell][cell]The division of scale of the wavecycle[/cell][cell][center]‚úÖ[/center][/cell]
[cell]Loudness[/cell][cell]Loudness of fractal component compared to original wavecycle, 1 = same level.[/cell][cell][center]‚úÖ[/center][/cell]
[/table]

[b]Functionality[/b]
Takes a wavecycle and divides its length and makes shorter and higher copies that equal the divided length. It then takes these copies and superimposes them over the original wavecycle. The higher the scaling the shorter each copy will be and the more copies will be layered over the original. The loudness control works like a mix between the original and the copies of the wavecycle. Produces a sheen of distortion over the original sound.
",
  },
  "distort_interpolate": {
	"description": 
"Time-stretch by repeating wavecycles and interpolating between them

[table=3]
[cell][b]Parameter Name[/b][/cell][cell][b]Description[/b][/cell][cell][b]Automatable[/b][/cell]
[cell]Multiplier[/cell][cell]The number of times each wavecycle repeats[/cell][cell][center]‚úÖ[/center][/cell]
[/table]

[b]Functionality[/b]
Takes a wavecycle and repeats it based on the multiplier. On each repetition the wavecycle is morphed slightly in shape so that it morphs into the shape of the next wavecycle in the file. This adds a modulatory quality to the output, successive wavecycles gliss and bend as they flow into one another.
",
  },
  "distort_multiply": {
	"description": 
"Distortion by multiplying wavecycle frequency

[table=3]
[cell][b]Parameter Name[/b][/cell][cell][b]Description[/b][/cell][cell][b]Automatable[/b][/cell]
[cell]Multiplier[/cell][cell]The amount each wavecycle is multiplied by[/cell][cell][center]‚úÖ[/center][/cell]
[/table]

[b]Functionality[/b]
Takes each wavecycle and multiplies its frequency making it higher and shorter. It then repeats this wavecycle to fill the length of the original keeping the output file the same length. This produces a distorted pitching up of the sound. 

This process is the opposite of Distort: Divide.
",
  },
  "distort_reform_2": {
	"description": 
"Replaces wavecycles with square shaped wavecycles

[b]Functionality[/b]
This process reads each wavecycle and replaces it with a square waveform of the same length and amplitude. This produces a similar but considerably harsher effect to Distort: Clip Fraction.
",
  },
  "distort_reform_4": {
	"description": 
"Replaces wavecycles with triangle shaped wavecycles

[b]Functionality[/b]
This process reads each wavecycle and replaces it with a triangle waveform of the same length and amplitude. This effect of this process is quite dependent on the input material. If applied to noisy and distorted sounds this will producing a smoothing or filtering like effect. On sounds with few harmonics - e.g. sine waves - it will add additional harmonics producing a gentle distortion.
",
  },
  "distort_reform_6": {
	"description": 
"Replaces wavecycles with short pulses


[b]Functionality[/b]
This process reads each wavecycle and replaces it with a short square pulse of a random length of the same amplitude. This produces a rough, rattle like timbre.
",
  },
  "distort_replace": {
	"description": 
"The strongest wavecycle in a group replaces the others

[table=3]
[cell][b]Parameter Name[/b][/cell][cell][b]Description[/b][/cell][cell][b]Automatable[/b][/cell]
[cell]Cycle Count[/cell][cell]The size of the group[/cell][cell][center]‚úÖ[/center][/cell]
[/table]

[b]Functionality[/b]
Looks at a set number of wavecycles and finds the loudest one and repeats it to replace all other wavecycles. The repeated wavecycle is repeated at its original frequency and amplitude. This produces a sample and hold like effect.
",
  },
 	"quirk_quirk_1": {
	"description": 
"Distortion by raising sample values of half wavecycles to a power

[table=3]
[cell][b]Parameter Name[/b][/cell][cell][b]Description[/b][/cell][cell][b]Automatable[/b][/cell]
[cell]Power Factor[/cell][cell]The power to raise each sample to[/cell][cell][center]‚ùå[/center][/cell]
[/table]

[b]Functionality[/b]
Introduces distortion into a signal by raising sample values to a power. Values less than 1 tend to flatten the tops of the waveform, while values greater than 1 narrow the waveform shape, creating a thinner, raspier sound.
",
  },
 	"extend_drunk_1": {
	"description": 
"Wanders through a soundfile jumping forwards and backwards while repeating small segments

[table=3]
[cell][b]Parameter Name[/b][/cell][cell][b]Description[/b][/cell][cell][b]Automatable[/b][/cell]
[cell]Minimum Output Duration[/cell][cell]The minimum length of the output in seconds[/cell][cell][center]‚ùå[/center][/cell]
[cell]Location[/cell][cell]The position in percent of the input file where the drunken walk occurs[/cell][cell][center]‚ùå[/center][/cell]
[cell]Ambitus[/cell][cell]The percentage of the input file the walk can move either side of the location by over the whole process[/cell][cell][center]‚ùå[/center][/cell]
[cell]Maximum Step[/cell][cell]The maximum percentage of the input file the walk can move by on each step[/cell][cell][center]‚ùå[/center][/cell]
[cell]Clock[/cell][cell]The time between each step in seconds[/cell][cell][center]‚ùå[/center][/cell]
[/table]

[b]Functionality[/b]
Starting at the Location in the input file this process takes a segment and repeats it. When the next clock tick occurs the process will step to another segment and start repeating that. The distance in the file that each step can be is set by the Maximum Step and the amount of the file that it is possible for the process to explore either side of the original Location is set by the Ambitus. 
",
  },
 	"extend_loop_1": {
	"description": 
"Repeats advancing segments of a sound

[table=3]
[cell][b]Parameter Name[/b][/cell][cell][b]Description[/b][/cell][cell][b]Automatable[/b][/cell]
[cell]Start[/cell][cell]The position in percent of the input file where the process will begin[/cell][cell][center]‚ùå[/center][/cell]
[cell]Loop Length[/cell][cell]The length of each looping segment in milliseconds[/cell][cell][center]‚ùå[/center][/cell]
[cell]Step[/cell][cell]The percentage of the input file it moves forwards by on each loop[/cell][cell][center]‚ùå[/center][/cell]
[/table]

[b]Functionality[/b]
Joins together, end-to-end, a series of segments taken from the file. This process will continue until the end of the file is reached. Note, with very long loop lengths and very short steps this may make [b]very[/b] long files.
",
  },
 	"extend_scramble_1": {
	"description": 
"Scrambles a soundfile for a set duration

[table=3]
[cell][b]Parameter Name[/b][/cell][cell][b]Description[/b][/cell][cell][b]Automatable[/b][/cell]
[cell]Minimum Chunk Length[/cell][cell]Minimum percentage of the input to cut[/cell][cell][center]‚ùå[/center][/cell]
[cell]Maximum Chunk Length[/cell][cell]Maximum percentage of the input to cut[/cell][cell][center]‚ùå[/center][/cell]
[cell]Output Duration[/cell][cell]Length of the output file in seconds[/cell][cell][center]‚ùå[/center][/cell]
[/table]

[b]Functionality[/b]
Cuts out segments at random from the full duration of the file and splices them end to end. Randomises the length of each chunk to be between the minimum and maximum. With small maximum chunks this will produce a granulat synthesis like effect, with large chunks it will create new phrases in the material.
",
  },
 	"extend_zigzag_1": {
	"description": 
"Moves through a sound sliding backwards and forwards as it goes

[table=3]
[cell][b]Parameter Name[/b][/cell][cell][b]Description[/b][/cell][cell][b]Automatable[/b][/cell]
[cell]Start Point[/cell][cell]The point in percent of the input where the process begins[/cell][cell][center]‚ùå[/center][/cell]
[cell]End Point[/cell][cell]The point in percent of the input where the process ends[/cell][cell][center]‚ùå[/center][/cell]
[cell]Output Duration[/cell][cell]The total duration of the output file[/cell][cell][center]‚ùå[/center][/cell]
[cell]Minimum Zigzag Time[/cell][cell]Minimum acceptable time between successive zigzag timepoints[/cell][cell][center]‚ùå[/center][/cell]
[/table]

[b]Functionality[/b]
Unlike the other extend processes this process also plays segments of the sound file backwards. This results in a smoother transition between jumps creating an output that slips and slides through its length.
",
  },
 	"filter_bank_1": {
	"description": 
"Bank of filters tuned to the harmonic series

[table=3]
[cell][b]Parameter Name[/b][/cell][cell][b]Description[/b][/cell][cell][b]Automatable[/b][/cell]
[cell]Q[/cell][cell]How narrow each filter band is[/cell][cell][center]‚úÖ[/center][/cell]
[cell]Makeup Gain[/cell][cell]How much gain to apply after filtering[/cell][cell][center]‚ùå[/center][/cell]
[cell]Lowest Band[/cell][cell]The lowest band in the bank[/cell][cell][center]‚ùå[/center][/cell]
[cell]Highest Band[/cell][cell]The highest band in the bank[/cell][cell][center]‚ùå[/center][/cell]
[cell]Scatter[/cell][cell]Amount of deviation from the harmonic series[/cell][cell][center]‚ùå[/center][/cell]
[/table]

[b]Functionality[/b]
This process takes the frequency of the lowest band and create filters up to the value of the highest band tuned to the harmonic series. Scatter applies some randomisation of these values moving the sound from something very harmonic to something more bell like in tone. The makeup gain provides a way of adding a boost to the filtered signal, you may need to adjust this if clipping occurs. Note, Q can be automated although doing this does sometimes produce temperamental results.
",
  },
 	"filter_bank_2": {
	"description": 
"Bank of filters tuned to odd harmonics from the harmonic series

[table=3]
[cell][b]Parameter Name[/b][/cell][cell][b]Description[/b][/cell][cell][b]Automatable[/b][/cell]
[cell]Q[/cell][cell]How narrow each filter band is[/cell][cell][center]‚úÖ[/center][/cell]
[cell]Makeup Gain[/cell][cell]How much gain to apply after filtering[/cell][cell][center]‚ùå[/center][/cell]
[cell]Lowest Band[/cell][cell]The lowest band in the bank[/cell][cell][center]‚ùå[/center][/cell]
[cell]Highest Band[/cell][cell]The highest band in the bank[/cell][cell][center]‚ùå[/center][/cell]
[cell]Scatter[/cell][cell]Amount of deviation from the harmonic series[/cell][cell][center]‚ùå[/center][/cell]
[/table]

[b]Functionality[/b]
This process takes the frequency of the lowest band and create filters up to the value of the highest band tuned to odd harmonics of the harmonic series. Scatter applies some randomisation of these values moving the sound from something very harmonic to something more bell like in tone. The makeup gain provides a way of adding a boost to the filtered signal, you may need to adjust this if clipping occurs. Note, Q can be automated although doing this does sometimes produce temperamental results.
",
  },
 	"filter_bank_5": {
	"description": 
"Bank of filters with a fixed number of bands spaced linearly between two frequencies

[table=3]
[cell][b]Parameter Name[/b][/cell][cell][b]Description[/b][/cell][cell][b]Automatable[/b][/cell]
[cell]Q[/cell][cell]How narrow each filter band is[/cell][cell][center]‚úÖ[/center][/cell]
[cell]Makeup Gain[/cell][cell]How much gain to apply after filtering[/cell][cell][center]‚ùå[/center][/cell]
[cell]Lowest Band[/cell][cell]The lowest band in the bank[/cell][cell][center]‚ùå[/center][/cell]
[cell]Highest Band[/cell][cell]The highest band in the bank[/cell][cell][center]‚ùå[/center][/cell]
[cell]Number of Filters[/cell][cell]The number of bands in the bank[/cell][cell][center]‚ùå[/center][/cell]
[cell]Scatter[/cell][cell]Amount of deviation from the harmonic series[/cell][cell][center]‚ùå[/center][/cell]
[/table]

[b]Functionality[/b]
This process takes the number of filters and spaces them equally in Hz between the lowest and highest bands. Scatter applies some randomisation of these values. The makeup gain provides a way of adding a boost to the filtered signal, you may need to adjust this if clipping occurs. Note, Q can be automated although doing this does sometimes produce temperamental results. Unlike Filter Bank: Pitched Intervals this will produce a more discordant sound as the frequencies will not align to uniform harmonic intervals.
",
  },
 	"filter_bank_6": {
	"description": 
"Bank of filters with a fixed number of bands spaced musically between two frequencies

[table=3]
[cell][b]Parameter Name[/b][/cell][cell][b]Description[/b][/cell][cell][b]Automatable[/b][/cell]
[cell]Q[/cell][cell]How narrow each filter band is[/cell][cell][center]‚úÖ[/center][/cell]
[cell]Makeup Gain[/cell][cell]How much gain to apply after filtering[/cell][cell][center]‚ùå[/center][/cell]
[cell]Lowest Band[/cell][cell]The lowest band in the bank[/cell][cell][center]‚ùå[/center][/cell]
[cell]Highest Band[/cell][cell]The highest band in the bank[/cell][cell][center]‚ùå[/center][/cell]
[cell]Number of Filters[/cell][cell]The number of bands in the bank[/cell][cell][center]‚ùå[/center][/cell]
[cell]Scatter[/cell][cell]Amount of deviation from the harmonic series[/cell][cell][center]‚ùå[/center][/cell]
[/table]

[b]Functionality[/b]
This process takes the number of filters and spaces them equally in semitones between the lowest and highest bands. Scatter applies some randomisation of these values moving the sound from something very harmonic to something more bell like in tone. The makeup gain provides a way of adding a boost to the filtered signal, you may need to adjust this if clipping occurs. Note, Q can be automated although doing this does sometimes produce temperamental results. Unlike Filter Bank: Linear this will produce a more consonant sound as the frequencies will align to uniform harmonic intervals.
",
  },
 	"filter_lohi_1": {
	"description": 
"Fixed low-pass or high-pass filter

[table=3]
[cell][b]Parameter Name[/b][/cell][cell][b]Description[/b][/cell][cell][b]Automatable[/b][/cell]
[cell]Rolloff[/cell][cell]Gain reduction of the filter, in dB[/cell][cell][center]‚ùå[/center][/cell]
[cell]Pass-band[/cell][cell]Last pitch to be passed by the filter in Hz[/cell][cell][center]‚ùå[/center][/cell]
[cell]Stop-band[/cell][cell]first pitch to be stopped by the filter in Hz[/cell][cell][center]‚ùå[/center][/cell]
[/table]

[b]Functionality[/b]
The low-pass filter lets through all of the sound below pass-band and attenuates the frequencies higher than pass-band, ending at stop-band.

The high-pass filter lets through all of the sound above pass-band and attenuates the frequencies lower than pass-band, ending at stop-band.

Setting the Pass-band lower than the stop-band creates a low-pass filter. Setting the Pass-band higher than the stop-band creates a high-pass filter.
",
  },
 	"modify_brassage_1": {
	"description": 
"Granular pitch shift keeping the same speed

[table=3]
[cell][b]Parameter Name[/b][/cell][cell][b]Description[/b][/cell][cell][b]Automatable[/b][/cell]
[cell]Pitch Shift[/cell][cell]Amount in semitones to shift the pitch by[/cell][cell][center]‚úÖ[/center][/cell]
[/table]

[b]Functionality[/b]
Cuts the sound file into grains and speeds them up or slows them down to change their pitch. By repeating/omitting grains it retains the original speed. At high increases in pitch this will create a metalic sound, with high decreases in pitch the sound will lose detail.
",
  },
 	"modify_brassage_2": {
	"description": 
"Granular time stretch keeping the same pitch

[table=3]
[cell][b]Parameter Name[/b][/cell][cell][b]Description[/b][/cell][cell][b]Automatable[/b][/cell]
[cell]Speed[/cell][cell]Multiplier to increase/decrease the speed by, 1 = original speed, 2 = double speed, 0.5 = half speed[/cell][cell][center]‚úÖ[/center][/cell]
[/table]

[b]Functionality[/b]
Cuts the sound file into grains and repeats omits grains to adjust the speed of the sound. At high decreases in speed this will create a metalic sound, with high increases in speed the sound will lose detail.
",
  },
 	"modify_brassage_4": {
	"description": 
"Random reordering of grains

[table=3]
[cell][b]Parameter Name[/b][/cell][cell][b]Description[/b][/cell][cell][b]Automatable[/b][/cell]
[cell]Grainsize[/cell][cell]Size of the grains in milliseconds[/cell][cell][center]‚úÖ[/center][/cell]
[cell]Range[/cell][cell]Distance to move while looking for next grain[/cell][cell][center]‚úÖ[/center][/cell]
[/table]

[b]Functionality[/b]
Moves through the file from start to end and reorders the grains within the set timeframe of range. Small range values will retain some of the original shape of the sound, large range values will result in a very jumbled sound.
",
  },
 	"modify_brassage_5": {
	"description": 
"Puts a grainy surface on a source

[table=3]
[cell][b]Parameter Name[/b][/cell][cell][b]Description[/b][/cell][cell][b]Automatable[/b][/cell]
[cell]Density[/cell][cell]Amount of grain overlap[/cell][cell][center]‚úÖ[/center][/cell]
[/table]

[b]Functionality[/b]
Moves through the sound from start to end and cuts it into grains. The density control sets how many of these grains are played back. A density of 1 will sound close to the original file, less than 1 will introduce gaps between grains, and values greater than one will smooth out the sound and introduce doubling.
",
  },
 	"modify_brassage_6": {
	"description": 
"Powerful granular segmentation/fragmentation procedures

[table=3]
[cell][b]Parameter Name[/b][/cell][cell][b]Description[/b][/cell][cell][b]Automatable[/b][/cell]
[cell]Scan Speed[/cell][cell]How fast to move through the file, 1 = original speed, 2 = double speed, 0.5 = half speed[/cell][cell][center]‚úÖ[/center][/cell]
[cell]Density[/cell][cell]Amount of grain overlap, values less than 1 create gaps[/cell][cell][center]‚úÖ[/center][/cell]
[cell]Grain Size[/cell][cell]Length of grains in ms[/cell][cell][center]‚úÖ[/center][/cell]
[cell]Pitch Shift[/cell][cell]Amount to shift pitch of grain in semitones[/cell][cell][center]‚úÖ[/center][/cell]
[cell]Amplitude[/cell][cell]Overal amplitude of the output[/cell][cell][center]‚úÖ[/center][/cell]
[cell]Panning[/cell][cell]Panning of grains from left to right[/cell][cell][center]‚úÖ[/center][/cell]
[cell]Attack[/cell][cell]Amount of time in ms each grain takes to fade in[/cell][cell][center]‚úÖ[/center][/cell]
[cell]Decay[/cell][cell]Amount of time in ms each grain takes to fade out[/cell][cell][center]‚úÖ[/center][/cell]
[cell]Search Range[/cell][cell]Distance to move while looking for next grain[/cell][cell][center]‚úÖ[/center][/cell]
[cell]Jitter[/cell][cell]Amount of randomisation of grain position[/cell][cell][center]‚úÖ[/center][/cell]
[/table]

[b]Functionality[/b]
This process moves through the file from start to end at the speed set by scan speed. How linearly it moves through the file is set by the Search Range and Jitter. 

As it moves through the file it cuts out small chunks - called grains - of the file and plays those back. The length of those grains and how they fade in and out is set by the Grain Size, Attack and Decay. The pitch of the grains is set by Pitch Shift. 

How many grains play back is set by the Density, desities less than 1 will create gaps between grains, densities higher than 1 will cause grains to overlap and merge. 

Finally the sound can be panned from left to right with Panning and the overall level of the sound can be adjusted with Amplitude. 

This process works particularly well when automation is applied to many parameters to make it shift and change over time. 
",
  },
 	"processname": {
	"description": 
"Short Description

[table=3]
[cell][b]Parameter Name[/b][/cell][cell][b]Description[/b][/cell][cell][b]Automatable[/b][/cell]
[cell] [/cell][cell] [/cell][cell][center]‚úÖ‚ùå[/center][/cell]
[/table]

[b]Functionality[/b]

",
  },
}
